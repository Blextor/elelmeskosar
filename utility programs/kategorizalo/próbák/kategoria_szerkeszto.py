# app.py ‚Äî √âlelmes kos√°r: s√©ma‚Äëszerkeszt≈ë UI (Streamlit)
# Futtat√°s:
#   pip install streamlit
#   streamlit run app.py
# A szerkeszt≈ë k√©pes a csatolt JSON‚Äës√©ma (kateg√≥ria ‚Üí alkateg√≥ria ‚Üí alt√≠pus ‚Üí tulajdons√°gok\n# {"egyedi": {...}, "csoportos": {...}}) m√≥dos√≠t√°s√°ra, b≈ëv√≠t√©s√©re √©s rendez√©s√©re.
# Megjegyz√©s: a s√©ma *defin√≠ci√≥t* kezeli (nem term√©keket). A bool jelz≈ëk √ºres objektumk√©nt\n# ({}), az opci√≥s tulajdons√°gok listak√©nt (list[str]) t√°rol√≥dnak.

from __future__ import annotations
import json
import os
import copy
from typing import Dict, Any, Optional

import streamlit as st

st.set_page_config(page_title="S√©ma-szerkeszt≈ë ‚Äì √âlelmes kos√°r", layout="wide")
st.title("üìö S√©ma-szerkeszt≈ë ‚Äì kateg√≥ri√°k, alkateg√≥ri√°k, alt√≠pusok √©s tulajdons√°gok")


# ---------- Seg√©df√ºggv√©nyek ----------

def ensure_node_scaffold(node: Dict[str, Any], level: str) -> Dict[str, Any]:
    """Biztos√≠tja, hogy a node tartalmazza a sz√ºks√©ges kulcsokat.
    level ‚àà {"kategoria", "alkategoria", "altipus"}
    """
    node.setdefault("tulajdons√°gok", {})
    node["tulajdons√°gok"].setdefault("egyedi", {})
    node["tulajdons√°gok"].setdefault("csoportos", {})
    if level == "kategoria":
        node.setdefault("alkateg√≥ri√°k", {})
    elif level == "alkategoria":
        node.setdefault("alt√≠pusok", {})
    return node


def sort_properties(props: Dict[str, Any]) -> Dict[str, Any]:
    """Alfabetikusan rendezi a tulajdons√°gokat √©s az opci√≥list√°kat, duplik√°tumok n√©lk√ºl."""
    sorted_props: Dict[str, Any] = {}
    for key in sorted(props.keys(), key=lambda s: s.lower()):
        val = props[key]
        if isinstance(val, list):
            # Egyedi opci√≥k rendez√©se √©s duplik√°tumok sz≈±r√©se
            seen = set()
            clean = []
            for v in val:
                v = str(v).strip()
                if v and v not in seen:
                    seen.add(v)
                    clean.append(v)
            sorted_props[key] = sorted(clean, key=lambda s: s.lower())
        else:
            # Bool jelz≈ë (√ºres dict) vagy ismeretlen ‚Äì mindkett≈ët t√°mogatjuk
            sorted_props[key] = {} if isinstance(val, dict) else {}
    return sorted_props


def sort_schema_rec(node: Dict[str, Any]) -> Dict[str, Any]:
    """Rekurz√≠van rendez minden szintet √©s list√°t."""
    node = copy.deepcopy(node)
    # Tulajdons√°gok
    if "tulajdons√°gok" in node:
        egyedi = node["tulajdons√°gok"].get("egyedi", {})
        csoportos = node["tulajdons√°gok"].get("csoportos", {})
        node["tulajdons√°gok"]["egyedi"] = sort_properties(egyedi)
        node["tulajdons√°gok"]["csoportos"] = sort_properties(csoportos)
    # Gyerekek
    if "alkateg√≥ri√°k" in node:
        node["alkateg√≥ri√°k"] = {k: sort_schema_rec(v) for k, v in
                                sorted(node["alkateg√≥ri√°k"].items(), key=lambda kv: kv[0].lower())}
    if "alt√≠pusok" in node:
        node["alt√≠pusok"] = {k: sort_schema_rec(v) for k, v in
                             sorted(node["alt√≠pusok"].items(), key=lambda kv: kv[0].lower())}
    return node


def rename_key(d: Dict[str, Any], old: str, new: str) -> None:
    if new == old:
        return
    if new in d:
        raise ValueError(f'"{new}" m√°r l√©tezik ezen a szinten.')
    d[new] = d.pop(old)


def get_node(schema: Dict[str, Any], cat: Optional[str], sub: Optional[str], subsub: Optional[str]) -> Dict[str, Any]:
    if not cat:
        return {}
    cat_node = ensure_node_scaffold(schema[cat], "kategoria")
    if not sub:
        return cat_node
    sub_node = ensure_node_scaffold(cat_node["alkateg√≥ri√°k"][sub], "alkategoria")
    if not subsub:
        return sub_node
    subsub_node = ensure_node_scaffold(sub_node["alt√≠pusok"][subsub], "altipus")
    return subsub_node


def delete_node(schema: Dict[str, Any], cat: str, sub: Optional[str], subsub: Optional[str]) -> None:
    if subsub:
        del schema[cat]["alkateg√≥ri√°k"][sub]["alt√≠pusok"][subsub]
    elif sub:
        del schema[cat]["alkateg√≥ri√°k"][sub]
    else:
        del schema[cat]


# ---------- √Ållapot ----------

if "schema" not in st.session_state:
    st.session_state.schema: Dict[str, Any] = {}
if "loaded_from" not in st.session_state:
    st.session_state.loaded_from: Optional[str] = None

# ---------- Bet√∂lt√©s / √∫j s√©ma ----------

with st.sidebar:
    st.subheader("üìÅ S√©ma bet√∂lt√©se")
    upl = st.file_uploader("JSON s√©ma felt√∂lt√©se (opcion√°lis)", type=["json"], accept_multiple_files=False)
    path_input = st.text_input("Vagy add meg a helyi f√°jlt‚Ä¶",
                               value=st.session_state.loaded_from or "kategori_tulajdonsagok_uj_sorted.json")
    cols_load = st.columns(2)
    with cols_load[0]:
        if st.button("Bet√∂lt√©s f√°jlb√≥l"):
            try:
                with open(path_input, "r", encoding="utf-8") as f:
                    data = json.load(f)
                # Rendezz√ºk √©s scaffoldoljuk
                data = {k: sort_schema_rec(ensure_node_scaffold(v, "kategoria")) for k, v in data.items()}
                st.session_state.schema = data
                st.session_state.loaded_from = path_input
                st.success(f"Bet√∂ltve: {path_input}")
            except Exception as e:
                st.error(f"Nem siker√ºlt bet√∂lteni: {e}")
    with cols_load[1]:
        if upl is not None and st.button("Bet√∂lt√©s a felt√∂lt√∂ttb≈ël"):
            try:
                data = json.loads(upl.getvalue().decode("utf-8"))
                data = {k: sort_schema_rec(ensure_node_scaffold(v, "kategoria")) for k, v in data.items()}
                st.session_state.schema = data
                st.session_state.loaded_from = None
                st.success("Felt√∂lt√∂tt s√©ma bet√∂ltve.")
            except Exception as e:
                st.error(f"Hiba a felt√∂lt√∂tt f√°jl olvas√°sakor: {e}")

    st.markdown("---")
    if st.button("‚ûï √öj √ºres s√©ma ind√≠t√°sa"):
        st.session_state.schema = {}
        st.session_state.loaded_from = None

schema = st.session_state.schema

if not schema:
    st.info("T√∂lts be egy s√©m√°t, vagy ind√≠ts √∫jat a bal oldali s√°vban.")
    st.stop()

# ---------- Navig√°ci√≥ (hierarchia) ----------

left, right = st.columns([1, 2])
with left:
    st.subheader("üß≠ Navig√°ci√≥")
    cats = ["(v√°lassz)"] + sorted(list(schema.keys()), key=lambda s: s.lower()) + ["+ √öj kateg√≥ria‚Ä¶"]
    cat_choice = st.selectbox("Kateg√≥ria", cats, key="nav_cat")

    new_cat_name = None
    if cat_choice == "+ √öj kateg√≥ria‚Ä¶":
        with st.form("form_new_cat", clear_on_submit=True):
            name = st.text_input("√öj kateg√≥ria neve")
            submitted = st.form_submit_button("Hozz√°ad√°s")
            if submitted and name:
                if name in schema:
                    st.warning("Ilyen nev≈± kateg√≥ria m√°r l√©tezik.")
                else:
                    schema[name] = ensure_node_scaffold({}, "kategoria")
                    schema = sort_schema_rec(schema)
                    st.session_state.schema = schema
                    st.success(f"Kateg√≥ria hozz√°adva: {name}")
                    new_cat_name = name

    # Akt√≠v kateg√≥ria (ha most hoztuk l√©tre, azt v√°lasszuk ki)
    if new_cat_name:
        cat_choice = new_cat_name

    sub_choice = None
    subsub_choice = None

    if cat_choice and cat_choice not in ("(v√°lassz)", "+ √öj kateg√≥ria‚Ä¶"):
        subs_dict = ensure_node_scaffold(schema[cat_choice], "kategoria")["alkateg√≥ri√°k"]
        subs = ["(nincs)"] + sorted(list(subs_dict.keys()), key=lambda s: s.lower()) + ["+ √öj alkateg√≥ria‚Ä¶"]
        sub_choice = st.selectbox("Alkateg√≥ria", subs, key="nav_sub")

        if sub_choice == "+ √öj alkateg√≥ria‚Ä¶":
            with st.form("form_new_sub", clear_on_submit=True):
                name = st.text_input("√öj alkateg√≥ria neve")
                submitted = st.form_submit_button("Hozz√°ad√°s")
                if submitted and name:
                    if name in subs_dict:
                        st.warning("Ilyen nev≈± alkateg√≥ria m√°r l√©tezik.")
                    else:
                        subs_dict[name] = ensure_node_scaffold({}, "alkategoria")
                        schema[cat_choice]["alkateg√≥ri√°k"] = {k: subs_dict[k] for k in
                                                              sorted(subs_dict.keys(), key=lambda s: s.lower())}
                        st.session_state.schema = schema
                        st.success(f"Alkateg√≥ria hozz√°adva: {name}")
                        sub_choice = name

        if sub_choice and sub_choice not in ("(nincs)", "+ √öj alkateg√≥ria‚Ä¶"):
            subsub_dict = ensure_node_scaffold(schema[cat_choice]["alkateg√≥ri√°k"][sub_choice], "alkategoria")[
                "alt√≠pusok"]
            subsubs = ["(nincs)"] + sorted(list(subsub_dict.keys()), key=lambda s: s.lower()) + ["+ √öj alt√≠pus‚Ä¶"]
            subsub_choice = st.selectbox("Alt√≠pus", subsubs, key="nav_subsub")

            if subsub_choice == "+ √öj alt√≠pus‚Ä¶":
                with st.form("form_new_subsub", clear_on_submit=True):
                    name = st.text_input("√öj alt√≠pus neve")
                    submitted = st.form_submit_button("Hozz√°ad√°s")
                    if submitted and name:
                        if name in subsub_dict:
                            st.warning("Ilyen nev≈± alt√≠pus m√°r l√©tezik.")
                        else:
                            subsub_dict[name] = ensure_node_scaffold({}, "altipus")
                            schema[cat_choice]["alkateg√≥ri√°k"][sub_choice]["alt√≠pusok"] = {
                                k: subsub_dict[k] for k in sorted(subsub_dict.keys(), key=lambda s: s.lower())
                            }
                            st.session_state.schema = schema
                            st.success(f"Alt√≠pus hozz√°adva: {name}")
                            subsub_choice = name

with right:
    st.subheader("‚úèÔ∏è Kiv√°lasztott elem szerkeszt√©se")
    if cat_choice in (None, "(v√°lassz)", "+ √öj kateg√≥ria‚Ä¶"):
        st.info("V√°lassz ki legal√°bb egy kateg√≥ri√°t a bal oldalon.")
        st.stop()

    # Aktu√°lis node √©s szint meghat√°roz√°sa
    level = "kategoria"
    if sub_choice and sub_choice not in ("(nincs)", "+ √öj alkateg√≥ria‚Ä¶"):
        level = "alkategoria"
    if subsub_choice and subsub_choice not in ("(nincs)", "+ √öj alt√≠pus‚Ä¶"):
        level = "altipus"

    node = get_node(schema, cat_choice,
                    None if sub_choice in (None, "(nincs)", "+ √öj alkateg√≥ria‚Ä¶") else sub_choice,
                    None if subsub_choice in (None, "(nincs)", "+ √öj alt√≠pus‚Ä¶") else subsub_choice)

    # ---------- √Åtnevez√©s / t√∂rl√©s ----------
    with st.expander("üî§ √Åtnevez√©s √©s t√∂rl√©s", expanded=False):
        colr1, colr2, colr3 = st.columns([2, 1, 1])
        current_name = subsub_choice if level == "altipus" else (sub_choice if level == "alkategoria" else cat_choice)
        new_name = colr1.text_input("√öj n√©v", value=current_name or "")
        if colr2.button("√Åtnevez√©s", type="primary"):
            try:
                if level == "kategoria":
                    rename_key(schema, cat_choice, new_name)
                    st.session_state.schema = sort_schema_rec(schema)
                    st.success("Kateg√≥ria √°tnevezve.")
                    st.rerun()
                elif level == "alkategoria":
                    rename_key(schema[cat_choice]["alkateg√≥ri√°k"], sub_choice, new_name)
                    st.session_state.schema = sort_schema_rec(schema)
                    st.success("Alkateg√≥ria √°tnevezve.")
                    st.rerun()
                else:
                    rename_key(schema[cat_choice]["alkateg√≥ri√°k"][sub_choice]["alt√≠pusok"], subsub_choice, new_name)
                    st.session_state.schema = sort_schema_rec(schema)
                    st.success("Alt√≠pus √°tnevezve.")
                    st.rerun()
            except Exception as e:
                st.error(str(e))

        if colr3.button("üóëÔ∏è T√∂rl√©s", help="Az aktu√°lis elemet t√∂rli"):
            delete_node(schema, cat_choice,
                        None if level == "kategoria" else sub_choice,
                        subsub_choice if level == "altipus" else None)
            st.session_state.schema = schema
            st.warning("T√∂r√∂lve.")
            st.rerun()

    # ---------- Tulajdons√°gok szerkeszt√©se ----------
    st.markdown("### ‚öôÔ∏è Tulajdons√°gok")


    def edit_prop_group(title: str, group_key: str):
        st.markdown(f"#### {title}")
        props: Dict[str, Any] = node["tulajdons√°gok"].get(group_key, {})

        # Megl√©v≈ë tulajdons√°gok list√°ja
        if not props:
            st.caption("(Nincs m√©g tulajdons√°g.)")
        else:
            for prop_name in sorted(list(props.keys()), key=lambda s: s.lower()):
                val = props[prop_name]
                with st.expander(f"üß© {prop_name}", expanded=False):
                    c1, c2 = st.columns([2, 1])
                    new_pname = c1.text_input("Tulajdons√°g neve", value=prop_name, key=f"{group_key}_pname_{prop_name}")
                    ptype = "Opci√≥k" if isinstance(val, list) else "Bool"
                    new_ptype = c2.selectbox("T√≠pus", ["Bool", "Opci√≥k"], index=0 if ptype == "Bool" else 1,
                                             key=f"{group_key}_ptype_{prop_name}")

                    # Opci√≥k szerkeszt√©se
                    options_text = ""
                    if new_ptype == "Opci√≥k":
                        current_opts = val if isinstance(val, list) else []
                        options_text = st.text_area("Opci√≥k (soronk√©nt)", value="\n".join(current_opts),
                                                    key=f"{group_key}_opts_{prop_name}")

                    cc1, cc2, cc3 = st.columns(3)
                    if cc1.button("Ment√©s", key=f"{group_key}_save_{prop_name}"):
                        # √Åtnevez√©s + t√≠pusv√°lt√°s + opci√≥k ment√©se
                        if new_pname != prop_name and new_pname in props:
                            st.error("M√°r l√©tezik ilyen nev≈± tulajdons√°g.")
                        else:
                            # t√≠pus √©s √©rt√©k
                            new_val: Any
                            if new_ptype == "Opci√≥k":
                                raw = [ln.strip() for ln in options_text.splitlines()]
                                new_opts = [x for x in raw if x]
                                new_val = sorted(list(dict.fromkeys(new_opts)), key=lambda s: s.lower())
                            else:
                                new_val = {}
                            # √°tnevez√©s
                            if new_pname != prop_name:
                                props[new_pname] = new_val
                                del props[prop_name]
                            else:
                                props[prop_name] = new_val
                            node["tulajdons√°gok"][group_key] = sort_properties(props)
                            st.session_state.schema = schema
                            st.success("Mentve.")
                    if cc2.button("üóëÔ∏è T√∂rl√©s", key=f"{group_key}_del_{prop_name}"):
                        del props[prop_name]
                        node["tulajdons√°gok"][group_key] = sort_properties(props)
                        st.session_state.schema = schema
                        st.warning("Tulajdons√°g t√∂r√∂lve.")
                    if cc3.button("‚ÜîÔ∏è √Åthelyez√©s m√°sik csoportba", key=f"{group_key}_move_{prop_name}"):
                        other_key = "egyedi" if group_key == "csoportos" else "csoportos"
                        # Az √°thelyez√©s *defin√≠ci√≥t* visz, jelent√©s v√°ltozatlan (bool vs opci√≥k)
                        node["tulajdons√°gok"].setdefault(other_key, {})
                        node["tulajdons√°gok"][other_key][prop_name] = val
                        del props[prop_name]
                        node["tulajdons√°gok"][group_key] = sort_properties(props)
                        node["tulajdons√°gok"][other_key] = sort_properties(node["tulajdons√°gok"][other_key])
                        st.session_state.schema = schema
                        st.info("√Åthelyezve.")

        st.markdown("**√öj tulajdons√°g hozz√°ad√°sa**")
        with st.form(f"form_add_prop_{group_key}", clear_on_submit=True):
            pname = st.text_input("N√©v", key=f"new_{group_key}_name")
            ptype = st.selectbox("T√≠pus", ["Bool", "Opci√≥k"], key=f"new_{group_key}_type")
            opts_text = ""
            if ptype == "Opci√≥k":
                opts_text = st.text_area("Opci√≥k (soronk√©nt)", key=f"new_{group_key}_opts")
            submitted = st.form_submit_button("Hozz√°ad√°s")
            if submitted:
                if not pname:
                    st.warning("Adj meg egy nevet.")
                else:
                    if pname in node["tulajdons√°gok"].get(group_key, {}):
                        st.warning("M√°r l√©tezik ilyen nev≈± tulajdons√°g ezen a szinten.")
                    else:
                        if ptype == "Opci√≥k":
                            raw = [ln.strip() for ln in opts_text.splitlines()]
                            opts = [x for x in raw if x]
                            node["tulajdons√°gok"].setdefault(group_key, {})[pname] = sorted(list(dict.fromkeys(opts)),
                                                                                            key=lambda s: s.lower())
                        else:
                            node["tulajdons√°gok"].setdefault(group_key, {})[pname] = {}
                        node["tulajdons√°gok"][group_key] = sort_properties(node["tulajdons√°gok"][group_key])
                        st.session_state.schema = schema
                        st.success("Hozz√°adva.")


    edit_prop_group("Egyedi (egym√°st kiz√°r√≥) / bool jelz≈ëk", "egyedi")
    st.markdown("---")
    edit_prop_group("Csoportos (t√∂bb egyszerre igaz lehet)", "csoportos")

# ---------- Ment√©s / export ----------

st.markdown("---")
st.subheader("üíæ Ment√©s √©s export")
with st.form("form_save"):
    out_path = st.text_input("C√©lf√°jl (JSON)",
                             value=(st.session_state.loaded_from or "kategori_tulajdonsagok_szerkesztett.json"))
    do_save = st.form_submit_button("Ment√©s f√°jlba", type="primary")
    if do_save:
        try:
            # V√©gs≈ë rendez√©s √≠r√°s el≈ëtt
            final = {k: sort_schema_rec(v) for k, v in st.session_state.schema.items()}
            with open(out_path, "w", encoding="utf-8") as f:
                json.dump(final, f, ensure_ascii=False, indent=2)
            st.success(f"Elmentve: {out_path}")
        except Exception as e:
            st.error(f"Ment√©si hiba: {e}")

final_text = json.dumps({k: sort_schema_rec(v) for k, v in st.session_state.schema.items()}, ensure_ascii=False,
                        indent=2)
st.download_button("‚¨áÔ∏è Let√∂lt√©s JSON-k√©nt", data=final_text.encode("utf-8"),
                   file_name="kategori_tulajdonsagok_szerkesztett.json", mime="application/json")

# ---------- Tipp / S√∫g√≥ ----------
with st.expander("‚ÑπÔ∏è S√∫g√≥"):
    st.markdown(
        """
        **Mit jelentenek a t√≠pusok?**
        - **Bool**: egyszer≈± igen/nem jelz≈ë (p√©ld√°ul: `bio`, `hazai`). A s√©m√°ban √ºres objektumk√©nt t√°rol√≥dik (`{}`).
        - **Opci√≥k**: felsorolt √©rt√©kek k√∂z√ºl *egy* (egyedi) vagy *t√∂bb* (csoportos) lehet igaz a term√©kekre vonatkoz√≥an. A s√©m√°ban listak√©nt t√°rol√≥dik (`["piros", "s√°rga", ...]`).

        **Szintek:**
        - **Kateg√≥ria** ‚Üí `alkateg√≥ri√°k` ‚Üí `alt√≠pusok` (mindegyikhez k√ºl√∂n tulajdons√°g‚Äëk√©szlet tartozhat).

        **Rendez√©s:**
        - Ment√©s el≈ëtt a program minden kulcsot √©s opci√≥list√°t ABC‚Äêrendbe √°ll√≠t, √©s kisz≈±ri a duplik√°tumokat.
        """
    )
